,expected_timesteps = tdiff
,format = "%Y-%m-%d %H:%M:%S"
,show_offset = c(0))
# Calculate everything on daily basis by grouping by weeks and days -----
(
heatmap_data <-
heatmap_data %>%
dplyr::group_by(weeknum,date) %>%
dplyr::mutate(
min_day_datetime = min(Datetime)
,tz = lubridate::tz(Datetime)
,diff_num = dt_per_day - (difftime(Datetime,date,units = units(tdiff)) %>% as.numeric(units=units(tdiff))/fac)
# ,tile_ID = dayfactor[paste0("d",wday(date))]*24+revcumsum(c(1,as.numeric(diff(Datetime))))) %>%
# dt_per_day = 24 hours per day or 48 half hours per day etc.
#original
# ,tile_ID = dayfactor[paste0("d",lubridate::wday(date))]*dt_per_day +
#   as.numeric(min_day_datetime - Datetime,
#              units = units(ref_difftime))/fac + 1/fac) %>%
# test
,tile_ID = dayfactor[paste0("d",lubridate::wday(date))]*dt_per_day +
diff_num + 1/fac) %>%
dplyr::mutate(datapoints = dplyr::n()
,daylightsavinghours_per_day = sum(daylightsaving)
,is_day_of_timeshift = ifelse(!(daylightsavinghours_per_day %in% c(0,dt_per_day)),T,F)) %>%
# filter(is_day_of_timeshift & datapoints > 24) %>%
# cerrecting timeshifts of day light saving
dplyr::mutate(tile_ID = dplyr::if_else(datapoints <= dt_per_day, tile_ID + 1/fac, tile_ID)
,tile_ID = dplyr::if_else(is_day_of_timeshift & datapoints > dt_per_day, tile_ID + 1/fac, tile_ID)
,tile_ID = dplyr::if_else(is_day_of_timeshift & daylightsaving & datapoints <= dt_per_day , tile_ID - 1/fac, tile_ID)) %>%
dplyr::ungroup() %>%
dplyr::mutate(
weekday = weekdays_abbr[lubridate::wday(x = date,week_start = getOption("lubridate.week.start",1))]
,plotyear = dplyr::if_else(weeknum == 53 & month == 1, year - 1, year)
,plotyear = dplyr::if_else(weeknum == 1 & month == 12, plotyear + 1, plotyear)
)
# filter(plotyear == 2016) # TODO: Week 53 in january days of next year
)
# Check if sundays can have 25 hours
has_timeshift = lubridate::dst(heatmap_data$Datetime) %>% any
z_limits = c(min(heatmap_data$Data),max(heatmap_data$Data))
# find id of first day in month
first_days <-
heatmap_data$Datetime %>%
firstDayMonth %>%
as.POSIXct(tz = lubridate::tz(heatmap_data$Datetime))
id_first_day = which(heatmap_data$Datetime %in% first_days)
data_first_day = data.frame(x = heatmap_data$weeknum[id_first_day],
y = heatmap_data$tile_ID[id_first_day],
year = heatmap_data$year[id_first_day])
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = seq(0.5+1/fac,
7*dt_per_day + 0.5,
by = dt_per_day) + c(0,rep(1/fac,7)) ,
color = "white") +
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "red") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = "Kalenderwoche (KW)",
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = "Wochentag",
expand = c(0, 0),
limits = seq(dt_per_day/2 + 0.5 ,
7*dt_per_day + 0.5,
by = dt_per_day ),
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
dayfactor = c(d1 = 1
,d7 = 2
,d6 = 3
,d5 = 4
,d4 = 5
,d3 = 6
,d2 = 7)
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = seq(0.5+1/fac,
7*dt_per_day + 0.5,
by = dt_per_day) + c(0,rep(1/fac,7)) ,
color = "white") +
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "red") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = "Kalenderwoche (KW)",
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = "Wochentag",
expand = c(0, 0),
limits = dayfactor*dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = seq(0.5+1/fac,
7*dt_per_day + 0.5,
by = dt_per_day) + c(0,rep(1/fac,7)) ,
color = "white") +
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "red") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = "Kalenderwoche (KW)",
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = "Wochentag",
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "white") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = "Kalenderwoche (KW)",
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = "Wochentag",
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
c(54643.4,54536.54) %>% class()
c(54643,54536) %>% class()
z_limits <- NULL
if( is.null( z_limits ) | length(z_limits) != 2 & class(z_limits) == "numeric"){
z_limits = c(min(heatmap_data$Data),max(heatmap_data$Data))
}
unique(heatmap_data$weeknum)
unique(heatmap_data$weeknum) %>% sort()
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "white") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = xlab,
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
minor_breaks = unique(heatmap_data$weeknum) %>% sort(),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = "Wochentag",
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "white") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = xlab,
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
minor_breaks = unique(heatmap_data$weeknum) %>% sort() %>% as.character(),
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = "Wochentag",
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "white") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = xlab,
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
# minor_breaks = unique(heatmap_data$weeknum) %>% sort() %>% as.character(), # TODO: add minor labels with weeknum see https://stackoverflow.com/questions/39717545/add-secondary-x-axis-labels-to-ggplot-with-one-x-axis
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = "Wochentag",
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
xlab
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "white") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = x_label,
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
# minor_breaks = unique(heatmap_data$weeknum) %>% sort() %>% as.character(), # TODO: add minor labels with weeknum see https://stackoverflow.com/questions/39717545/add-secondary-x-axis-labels-to-ggplot-with-one-x-axis
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = "Wochentag",
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
x_label = "ISO week"
y_label = "Day of the week"
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "white") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = x_label,
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
# minor_breaks = unique(heatmap_data$weeknum) %>% sort() %>% as.character(), # TODO: add minor labels with weeknum see https://stackoverflow.com/questions/39717545/add-secondary-x-axis-labels-to-ggplot-with-one-x-axis
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = y_label,
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "white") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = x_label,
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
minor_breaks = unique(heatmap_data$weeknum) %>% sort() %>% as.character(), # TODO: add minor labels with weeknum see https://stackoverflow.com/questions/39717545/add-secondary-x-axis-labels-to-ggplot-with-one-x-axis
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = y_label,
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
# heatmap
# heatmap_plotly <-
(
gg.obj <-
ggplot2::ggplot()  +
ggplot2::geom_tile(data = heatmap_data
, aes(x = weeknum,
y = tile_ID,
fill = Data,
text = sprintf("Datetime: %s<br>Day: %s<br>Value: %f<br>Week: %f<br>ID: %f"
,Datetime, weekday, Data, weeknum, tile_ID)
)
) +
viridis::scale_fill_viridis(
limits = z_limits,
name = LegendTitle,# TODO: Legend name from function argument
option = 'D', # plasma "D" = viridis
direction = 1,
na.value = "red") +
# added if else to consider daylight shifting where one sunday has 25 instead of 24 hours
ggplot2::geom_hline(yintercept = dayfactor*dt_per_day + 1/fac + 0.5,
color = "white") +
ggplot2::geom_point(data = subset(heatmap_data, Datetime %in% first_days),
aes(x = weeknum,y = tile_ID), pch = 3, color = "white") +
ggplot2::facet_wrap('plotyear', ncol = 1) +
ggplot2::scale_x_continuous(name = x_label,
expand = c(0,0),
breaks = seq(min(heatmap_data$weeknum,na.rm = T),
max(heatmap_data$weeknum,na.rm = T),
length = 13),
minor_breaks = unique(heatmap_data$weeknum) %>% sort() , # TODO: add minor labels with weeknum see https://stackoverflow.com/questions/39717545/add-secondary-x-axis-labels-to-ggplot-with-one-x-axis
labels = c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec", "Jan")) +
ggplot2::scale_y_discrete(name = y_label,
expand = c(0, 0),
limits = dayfactor*dt_per_day - dt_per_day/2 + 1/fac + 0.5,
labels = rev(c("Mo", "Di", "Mi", "Do", "Fr", "Sa", "So")))
) %>%
plotly::ggplotly()
document()
library(devtools)
document()
document()
?tsheatmap
??tsheatmap
